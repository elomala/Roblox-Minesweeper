local ts = game:GetService("TweenService")
local module = {}

local colors = {
	Color3.fromRGB(41, 170, 51), Color3.fromRGB(37, 118, 65) -- two colors between which the boxes alternate
}

local function neighbours(number, rowsize) -- this function returns the blocks around the block represented by the "number" variable.
	if type(number) == "string" then tonumber(number) end -- since name is stored as a string it is to be converted to a number for inequality operators
	if type(rowsize) == "string" then tonumber(rowsize) end
	if number == 1 then
		return {2,1+rowsize,rowsize+2}
	elseif number == rowsize then
		return {rowsize-1, 2*rowsize, 2*rowsize - 1}
	elseif number == rowsize*rowsize then
		return {number-1, number - rowsize, number - (rowsize+1)}
	elseif number == rowsize * rowsize - (rowsize-1) then
		return {number+1, number - rowsize, number - (rowsize-1)}
	elseif math.floor(number/rowsize) == 0 then
		return {number + (rowsize-1), number + rowsize, number + (rowsize+1), number + 1, number -1}
	elseif math.ceil(number/rowsize) == rowsize then
		return {number + 1, number - 1, number - rowsize, number - (rowsize-1), number - (rowsize+1)}
	elseif number%rowsize == 1 then
		return {number + rowsize, number - rowsize, number + 1, number - (rowsize-1), number + (rowsize+1)}
	elseif number%rowsize == 0 then
		return {number + rowsize, number - rowsize, number -1, number + (rowsize-1), number - (rowsize+1)}
	else
		return {number + rowsize, number - rowsize, number -1, number +1 , number + (rowsize-1), number - (rowsize-1), number - (rowsize+1), number + (rowsize+1)}
	end
end

local function generate(size, color) -- used to generate the boxes on which the game is played
	local model = Instance.new("Model")
	local startingpart = game.ServerStorage.GameStuff.minesweeper.startingpart:Clone() -- Make a cube beforehand and store it so that it can be cloned again and again
	startingpart.Color = colors[1]
	startingpart.Name = 1
	startingpart.Position = Vector3.new(10000,10000,10000)
	startingpart.Parent = model
	local lastpart = startingpart
	for i = 1, (size*size)-1, 1 do -- minus 1 because one box is already placed and used as starting point
		lastpart = lastpart:Clone()
		lastpart.Name = i+1
		lastpart.Color = colors[(i%2)+1] -- this is a cool way to alternate colors
		if i%size ~= 0 then
			lastpart.Position = Vector3.new(lastpart.Position.X+lastpart.Size.X,lastpart.Position.Y,lastpart.Position.Z)
		else
			lastpart.Position = startingpart.Position + Vector3.new(0,0,5)
			startingpart = lastpart
		end
		lastpart.Parent = model
	end
	return model
end

function module.mineSweeper(size:number, pos, player:Player) 
-- size will the number of rows and coloumns. Currently, number of rows and coloumns will be same. You can have rectangular grid by a bit of editing.
-- pos will be the position where the whole game is supposed to spawn
-- player will refer to the only player that can impact the game to prevent sabotaging. If you want everyone to be able to play, dont pass the player argument(or just set it to nil)

	local model = generate(size)

	local bombs = {}
	local safe = model:GetChildren()
	local bombnumber = math.random(math.ceil((size*size)*(13/100)),math.ceil((size*size)*(18/100))) -- randomly selected number of bombs having density 13-18%
	print(bombnumber/#safe * 100) -- prints % density of bombs
	local function onClick(v)
		v.Flag.FlagPlace:Play()
		if v.Flag.Transparency == 0 then
			v.Flag.Transparency = 1
		else
			v.Flag.Transparency = 0
		end
	end
	for i, v in model:GetChildren() do
		local deb = false
		v.ClickDetector.MouseClick:Connect(function(plr) -- clicking allows you to place flags
			if deb then return end
			if player then
				if player == plr then
					deb = true
					onClick(v)
					task.wait(0.4) deb = false
				end
			else
				deb = true
				onClick(v)
				task.wait(0.4) deb = false
			end
		end)
	end
	for i = 1, bombnumber, 1 do
		local no = math.random(#safe)
		table.insert(bombs, safe[no])
		table.remove(safe, no)
	end
	for i, v in pairs(bombs) do -- ADDING THIS TO BOMBS TO TRIP EXPLOITERS
		local surf = game.ServerStorage.GameStuff.minesweeper.SurfaceGui:Clone()
		surf.Enabled = false
		surf.Parent = v 
		local textlabel = surf.TextLabel
		textlabel.Text = tostring(math.random(1,5))-- assigns random number to all bombs to trip them exploiters
	end
	local zeros = {} 
	for i, v in pairs(safe) do 
		local surf = game.ServerStorage.GameStuff.minesweeper.SurfaceGui:Clone()
		surf.Enabled = false
		surf.Parent = v 
		local textlabel = surf.TextLabel
		local current = v.Name
		local number = 0
		local surround = neighbours(current, size)
		for i, v in surround do
			if table.find(bombs, model:FindFirstChild(tostring(v))) then
				number += 1
			end
		end
		if number == 0 then table.insert(zeros, v)
			number = math.random(1,5)	-- assigns random number to all 0s to trip them exploiters
		end
		surf.TextLabel.Text = tostring(number) -- sets the number
	end
	local cs = {}
	local done = 0 -- if done == safeblocks means that the player wins the game
	local function onTouchingBomb(v, hit)
		v:FindFirstChildOfClass("ClickDetector"):Destroy()
		v.Color = Color3.new(1,0,0)
		local char = hit.Parent
		char.Humanoid:TakeDamage(100)
		--GAME OVER
		if player then
			print(player.Name .. " has lost the game")
		else
			print(char.Name .. " just got blasted")
		end
		--model:Destroy() -- used to end game or something
	end
	local function chain(part) -- used for chain unlocking all the tiles that are adjacent and are 0s
		local done = {} -- zeros are stored in this so that their adjacent blocks can be checked later for chaining
		for _,z in pairs(neighbours(tonumber(part.Name),size)) do -- goes through all the neighbours of the cell
			local thing = model:FindFirstChild(tostring(z)) -- the instance having a specific number z
			if not thing then continue end
			if thing:GetAttribute("Done") then continue end 
			thing:SetAttribute("Done", true)
			cs[tostring(thing.Name) .. "_c"]:Disconnect()
			if table.find(zeros, thing) then -- if one of them is in "zeros" i.e tiles having no adjacent bombs
				table.insert(done, thing) -- surface gui is not enabled here because its a zero
			else
				thing.SurfaceGui.Enabled = true
			end
			thing.Color = Color3.fromRGB(253, 234, 141)
			if thing:FindFirstChildOfClass("ClickDetector") then
				thing:FindFirstChildOfClass("ClickDetector"):Destroy()
			end
		end
		return done -- returning the zeros that got done
	end
	local function onTouchingSafe(v)
		v:SetAttribute("Done", true)
		done += 1
		if done == #safe then -- if all safe tiles are done then wins game
			-- PLAYER WINS GAME!!
			if player then
				print(player.Name .. " has won the game")
			else
				print("The game has been won")
			end
			-- model:Destroy() -- ends game or something. Award with credits or whatever here
		end
		if v:FindFirstChildOfClass("ClickDetector") then
			v:FindFirstChildOfClass("ClickDetector"):Destroy()
		end
		v.Color = Color3.fromRGB(253, 234, 141)
		--chaining is basically looking at the tiles adjacent to 0s and if they are 0s, their adjacent tiles are checked and so on
		--if a tile is not a zero, it is revealed and adjacent tiles from the non zero tiles are not checked.
		if table.find(zeros, v) then -- if the player steps on a zero tile, chaining starts.
			local donefor = {v} -- table containing all the zeros that are done
			repeat -- its hard to explain this loop in words. The basic functionality has been explained above.
				local starting = {}
				for x, d in pairs(donefor) do
					table.insert(starting, x)
					local returnee = chain(d)
					for i, v in pairs(returnee) do
						table.insert(donefor,v)
					end
				end
				for _, j in starting do table.remove(donefor, j) end
			until #donefor == 0
		else
			v.SurfaceGui.Enabled = true
		end
	end
	for i, v:BasePart in model:GetChildren() do
		if table.find(bombs, v) then
			local c
			c = v.Touched:Connect(function(hit)
				if v.Flag.Transparency == 0 then return end
				if not hit.Parent:FindFirstChildOfClass("Humanoid") then return end
				if player then
					if player == game.Players:GetPlayerFromCharacter(hit.Parent) then
						onTouchingBomb(v, hit)
						c:Disconnect()
					end
				else
					onTouchingBomb(v, hit)
					c:Disconnect()
				end
			end)
		else
			cs[tostring(v.Name) .. "_c"] = v.Touched:Connect(function(hit)
				if v.Flag.Transparency == 0 then return end
				if not hit.Parent:FindFirstChildOfClass("Humanoid") then return end
				if player then
					if player == game.Players:GetPlayerFromCharacter(hit.Parent) then
						onTouchingSafe(v)
						cs[tostring(v.Name) .. "_c"]:Disconnect()
					end
				else
					onTouchingSafe(v)
					cs[tostring(v.Name) .. "_c"]:Disconnect()
				end
			end)
		end
	end
	model.Parent = workspace
	model:MoveTo(pos)
	
	if player then -- TPing player to one of the safe blocks
		local char = player.Character
		if not char then player.CharacterAdded:Wait() end
		local hum = char:FindFirstChildOfClass("Humanoid")
		if hum then hum.WalkSpeed = 0 end
		task.wait(1)
		char:MoveTo(zeros[math.random(1,#zeros)].Position + Vector3.new(0,6,0))
		task.wait(1)
		hum.WalkSpeed = 16
	else -- TPing everyone to a random safeblock
		for i, players in pairs(game.Players:GetPlayers()) do
			task.spawn(function()
				local char = players.Character
				if not char then players.CharacterAdded:Wait() end
				local hum = char:FindFirstChildOfClass("Humanoid")
				if hum then hum.WalkSpeed = 0 end
				task.wait(1)
				char:MoveTo(zeros[math.random(1,#zeros)].Position + Vector3.new(0,6,0))
				task.wait(1)
				hum.WalkSpeed = 16
			end)
		end
	end
end
return module
